<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Server - <%= typeof settings !== 'undefined' && settings.name ? settings.name : 'CLOUDCRASH Host Dashboard' %></title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;600;700&family=Rajdhani:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        :root {
            --primary: #0a0a0a;
            --secondary: #050505;
            --accent: #ffffff;
            --accent-glow: 0 0 12px rgba(255, 255, 255, 0.3), 0 0 24px rgba(255, 255, 255, 0.2);
            --text-primary: #ffffff;
            --text-secondary: #a0a0a0;
            --danger: #ff4d4f;
            --warning: #ffbb33;
            --border: #2a2a2a;
            --card-bg: rgba(0, 0, 0, 0.75);
            --sidebar-width: 260px;
            --header-height: 70px;
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Rajdhani', sans-serif;
        }

        body {
            background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
            color: var(--text-primary);
            min-height: 100vh;
            display: flex;
            position: relative;
            overflow-x: hidden;
        }

        /* Particle Network Background */
        #particle-network {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            z-index: -2;
        }

        /* Grid Overlay */
        .grid-overlay {
            position: fixed;
            width: 100%;
            height: 100%;
            background-image: 
                linear-gradient(rgba(255, 255, 255, 0.03) 1px, transparent 1px),
                linear-gradient(90deg, rgba(255, 255, 255, 0.03) 1px, transparent 1px);
            background-size: 40px 40px;
            z-index: -1;
            opacity: 0.4;
        }

        /* Sidebar Styles */
        .sidebar {
            width: var(--sidebar-width);
            background: var(--card-bg);
            backdrop-filter: blur(12px);
            border-right: 1px solid var(--border);
            height: 100vh;
            position: fixed;
            overflow-y: auto;
            padding: 20px 0;
        }

        .sidebar-header {
            padding: 0 20px 20px;
            border-bottom: 1px solid var(--border);
            margin-bottom: 15px;
        }

        .sidebar-header h2 {
            font-family: 'Orbitron', sans-serif;
            font-size: 1.5rem;
            background: linear-gradient(to right, #ffffff, var(--accent));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 12px 20px;
            color: var(--text-secondary);
            text-decoration: none;
            transition: var(--transition);
            position: relative;
            overflow: hidden;
        }

        .nav-item:hover {
            background: rgba(0, 228, 255, 0.1);
            color: var(--text-primary);
        }

        .nav-item.active {
            background: linear-gradient(135deg, var(--accent) 0%, #0083b0 100%);
            color: white;
            box-shadow: var(--accent-glow);
        }

        .nav-item::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: 0.5s;
        }

        .nav-item:hover::before {
            left: 100%;
        }

        .nav-item i {
            width: 24px;
            margin-right: 12px;
        }

        /* Main Content Styles */
        .main-content {
            flex: 1;
            margin-left: var(--sidebar-width);
            padding: 20px;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 20px;
            background: var(--card-bg);
            backdrop-filter: blur(12px);
            border: 1px solid var(--border);
            border-radius: 12px;
            margin-bottom: 20px;
            box-shadow: var(--accent-glow);
        }

        .user-info {
            display: flex;
            align-items: center;
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-right: 12px;
            border: 2px solid var(--accent);
        }

        .user-details h3 {
            font-family: 'Orbitron', sans-serif;
            font-size: 1rem;
            background: linear-gradient(to right, #ffffff, var(--accent));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .user-details p {
            font-size: 0.8rem;
            color: var(--text-secondary);
        }

        .logout-btn {
            background: linear-gradient(135deg, var(--danger) 0%, #c03537 100%);
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            align-items: center;
            box-shadow: 0 4px 15px rgba(255, 77, 79, 0.4);
        }

        .logout-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(255, 77, 79, 0.6);
        }

        .logout-btn i {
            margin-right: 6px;
        }

        /* Card Styles */
        .card {
            background: var(--card-bg);
            backdrop-filter: blur(12px);
            border: 1px solid var(--border);
            border-radius: 12px;
            padding: 20px;
            box-shadow: var(--accent-glow);
            margin-bottom: 20px;
            position: relative;
            overflow: hidden;
        }

        .card::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: linear-gradient(45deg, transparent, rgba(0, 228, 255, 0.15), transparent);
            transform: rotate(45deg);
            animation: shine 5s ease-in-out infinite;
            z-index: 0;
        }

        @keyframes shine {
            0% { transform: translateX(-100%) rotate(45deg); }
            50% { transform: translateX(100%) rotate(45deg); }
            100% { transform: translateX(100%) rotate(45deg); }
        }

        .card-content {
            position: relative;
            z-index: 1;
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px solid var(--border);
        }

        .card-title {
            font-family: 'Orbitron', sans-serif;
            font-size: 1.2rem;
            background: linear-gradient(to right, #ffffff, var(--accent));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            display: flex;
            align-items: center;
        }

        .card-title i {
            margin-right: 10px;
            color: var(--accent);
        }

        .card-icon {
            color: var(--accent);
            font-size: 1.5rem;
        }

        /* Form Styles */
        .form-group {
            margin-bottom: 20px;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: var(--text-primary);
        }

        .form-input {
            width: 100%;
            padding: 12px 15px;
            background: rgba(0, 228, 255, 0.1);
            border: 1px solid var(--border);
            border-radius: 8px;
            color: var(--text-primary);
            font-size: 1rem;
            transition: var(--transition);
        }

        .form-input:focus {
            outline: none;
            border-color: var(--accent);
            box-shadow: var(--accent-glow);
        }

        .form-input:disabled {
            background: rgba(0, 228, 255, 0.05);
            color: var(--text-secondary);
        }

        .input-with-unit {
            position: relative;
        }

        .input-unit {
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--text-secondary);
        }

        .slider-container {
            margin-top: 10px;
        }

        .slider {
            -webkit-appearance: none;
            width: 100%;
            height: 6px;
            border-radius: 3px;
            background: rgba(0, 228, 255, 0.1);
            outline: none;
        }

        .slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 18px;
            height: 18px;
            border-radius: 50%;
            background: var(--accent);
            cursor: pointer;
            transition: var(--transition);
        }

        .slider::-webkit-slider-thumb:hover {
            box-shadow: var(--accent-glow);
        }

        .slider-labels {
            display: flex;
            justify-content: space-between;
            margin-top: 5px;
            color: var(--text-secondary);
            font-size: 0.8rem;
        }

        /* Button Styles */
        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 10px 20px;
            border-radius: 8px;
            font-family: 'Orbitron', sans-serif;
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition);
            border: none;
            font-size: 1rem;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--accent) 0%, #0083b0 100%);
            color: white;
            box-shadow: 0 4px 15px rgba(0, 228, 255, 0.4);
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 228, 255, 0.6);
        }

        .btn-danger {
            background: linear-gradient(135deg, var(--danger) 0%, #c03537 100%);
            color: white;
            box-shadow: 0 4px 15px rgba(255, 77, 79, 0.4);
        }

        .btn-danger:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(255, 77, 79, 0.6);
        }

        .btn i {
            margin-right: 8px;
        }

        /* Resource Preview */
        .resource-preview {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
            margin-top: 20px;
        }

        .preview-item {
            background: rgba(0, 228, 255, 0.1);
            padding: 15px;
            border-radius: 8px;
            text-align: center;
        }

        .preview-value {
            font-size: 1.5rem;
            font-weight: bold;
            color: var(--accent);
            margin-bottom: 5px;
        }

        .preview-label {
            font-size: 0.9rem;
            color: var(--text-secondary);
        }

        /* Toggle Switch */
        .toggle-switch {
            position: relative;
            display: inline-block;
            width: 50px;
            height: 24px;
        }

        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .toggle-slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 228, 255, 0.1);
            transition: .4s;
            border-radius: 24px;
        }

        .toggle-slider:before {
            position: absolute;
            content: "";
            height: 16px;
            width: 16px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }

        input:checked + .toggle-slider {
            background-color: var(--accent);
        }

        input:checked + .toggle-slider:before {
            transform: translateX(26px);
        }

        /* Server Status */
        .server-status {
            display: flex;
            align-items: center;
            margin-top: 15px;
            padding: 10px;
            background: rgba(0, 228, 255, 0.1);
            border-radius: 8px;
        }

        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 10px;
        }

        .status-online {
            background: var(--accent);
            box-shadow: var(--accent-glow);
        }

        .status-offline {
            background: var(--danger);
            box-shadow: 0 0 8px rgba(255, 77, 79, 0.4);
        }

        /* Responsive */
        @media (max-width: 768px) {
            .sidebar {
                width: 70px;
            }

            .sidebar-header h2, .nav-item span {
                display: none;
            }

            .nav-item {
                justify-content: center;
                padding: 15px;
            }

            .nav-item i {
                margin-right: 0;
            }

            .main-content {
                margin-left: 70px;
            }

            .resource-preview {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <!-- Particle Network Background -->
    <div id="particle-network"></div>

    <!-- Grid Overlay -->
    <div class="grid-overlay"></div>

    <!-- Sidebar -->
    <div class="sidebar">
        <div class="sidebar-header">
            <h2><%= typeof settings !== 'undefined' && settings.name ? settings.name : 'CLOUD CRASH Dashboard' %></h2>
        </div>

        <a href="/dashboard" class="nav-item">
            <i class="fas fa-home"></i>
            <span>Dashboard</span>
        </a>

        <a href="/servers" class="nav-item">
            <i class="fas fa-server"></i>
            <span>My Servers</span>
        </a>

        <a href="/servers/create" class="nav-item">
            <i class="fas fa-plus"></i>
            <span>Create Server</span>
        </a>

        <a href="/afk" class="nav-item">
            <i class="fas fa-coins"></i>
            <span>AFK Earning</span>
        </a>

        <a href="/profile" class="nav-item">
            <i class="fa-solid fa-id-card"></i>
            <span>My Profile</span>
        </a>

        <a href="/store" class="nav-item">
            <i class="fas fa-microchip"></i>
            <span>Resources</span>
        </a>

        <a href="/security" class="nav-item">
            <i class="fas fa-cog"></i>
            <span>Security</span>
        </a>

        <% if (typeof user !== 'undefined' && user.role === 'admin') { %>
            <a href="/admin" class="nav-item">
                <i class="fas fa-shield-alt"></i>
                <span>Admin Panel</span>
            </a>
        <% } %>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <!-- Header -->
        <div class="header">
            <div class="user-info">
                <% if (typeof user !== 'undefined' && user.avatar) { %>
                    <img src="<%= user.avatar %>" alt="Avatar" class="user-avatar">
                <% } else { %>
                    <div class="user-avatar" style="background: var(--secondary); display: flex; align-items: center; justify-content: center;">
                        <i class="fas fa-user"></i>
                    </div>
                <% } %>
                <div class="user-details">
                    <h3><%= typeof username !== 'undefined' && username ? username : 'Guest' %></h3>
                    <!-- Coin balance hidden as requested -->
                    <!-- <p>Balance: <span id="user-balance"><%= typeof coins !== 'undefined' ? coins.toFixed(2) : '0.00' %></span> coins</p> -->
                </div>
            </div>

            <button class="logout-btn" onclick="location.href='/logout'">
                <i class="fas fa-sign-out-alt"></i>
                Logout
            </button>
        </div>

        <!-- Server List or Server Console -->
        <% if (req.query && req.query.id) { %>
        <% if (pterodactyl && pterodactyl.relationships && pterodactyl.relationships.servers && pterodactyl.relationships.servers.data && pterodactyl.relationships.servers.data.length > 0) { %>
            <% 
                let foundServer = pterodactyl.relationships.servers.data.filter(name => name.attributes.id == req.query.id);
                let serverExists = foundServer.length == 1;
                let serverinfo = serverExists ? foundServer[0] : null;
                let attemptegg = null;
                let egginfo = "???";
                if (serverinfo) {
                    for (let [name, value] of Object.entries(settings.api.client.eggs)) {
                        if (settings.api.client.eggs[name].info.egg == serverinfo.attributes.egg) {
                            attemptegg = settings.api.client.eggs[name];
                            egginfo = attemptegg ? attemptegg.display : "???";
                            break;
                        }
                    }
                }
            %>
            <% if (serverExists && serverinfo) { %>
        <!-- Server Console -->
        <div class="card">
            <div class="card-content">
                <div class="card-header">
                    <h2 class="card-title"><i class="fas fa-server"></i> <%= serverinfo.attributes.name %></h2>
                    <div class="server-status">
                        <span class="status-indicator" id="server-status-indicator"></span>
                        <span id="server-status-text">Loading...</span>
                </div>
                </div>

                <!-- Power Controls -->
                <div style="display: flex; gap: 10px; margin-bottom: 20px; flex-wrap: wrap;">
                    <button class="btn btn-primary" onclick="powerAction('start')">
                        <i class="fas fa-play"></i> Start
                    </button>
                    <button class="btn btn-danger" onclick="powerAction('stop')">
                        <i class="fas fa-stop"></i> Stop
                    </button>
                    <button class="btn" style="background: var(--warning);" onclick="powerAction('restart')">
                        <i class="fas fa-redo"></i> Restart
                    </button>
                    <button class="btn btn-danger" onclick="powerAction('kill')">
                        <i class="fas fa-skull"></i> Kill
                    </button>
                </div>

                <!-- Server Info -->
                <div class="resource-preview">
                    <div class="preview-item">
                        <div class="preview-value" id="server-status-big">-</div>
                        <div class="preview-label">Status</div>
                </div>
                    <div class="preview-item">
                        <div class="preview-value" id="server-ip">-</div>
                        <div class="preview-label">IP Address</div>
            </div>
                    <div class="preview-item">
                        <div class="preview-value" id="server-port">-</div>
                        <div class="preview-label">Port</div>
        </div>
                    <div class="preview-item">
                        <div class="preview-value" id="server-disk">-</div>
                        <div class="preview-label">Disk Used</div>
                </div>
                    <div class="preview-item">
                        <div class="preview-value" id="server-ram">Loading...</div>
                        <div class="preview-label">Memory</div>
                    </div>
                    <div class="preview-item">
                        <div class="preview-value" id="server-cpu">Loading...</div>
                        <div class="preview-label">CPU</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Console -->
        <div class="card" style="height: 500px; display: flex; flex-direction: column;">
            <div class="card-content" style="flex: 1; display: flex; flex-direction: column; overflow: hidden;">
                <div class="card-header">
                    <h2 class="card-title"><i class="fas fa-terminal"></i> Server Console</h2>
                </div>
                <div id="console-output" style="flex: 1; overflow-y: auto; background: rgba(0,0,0,0.5); padding: 15px; font-family: 'Courier New', monospace; font-size: 0.9rem; border-radius: 8px; margin-bottom: 15px;">
                    <div class="console-line">[<%= new Date().toLocaleTimeString() %>] Connecting to server...</div>
                </div>
                <div style="display: flex; align-items: center; gap: 10px;">
                    <input type="text" id="console-input" placeholder="Enter command and press Enter..." class="form-input" style="flex: 1;" onkeydown="if(event.key === 'Enter') sendCommand()">
                </div>
            </div>
        </div>


        <script>
            // Particle network animation
            document.addEventListener('DOMContentLoaded', function() {
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');
                const container = document.getElementById('particle-network');
                container.appendChild(canvas);

                let width = window.innerWidth;
                let height = window.innerHeight;

                canvas.width = width;
                canvas.height = height;

                class Particle {
                    constructor() {
                        this.x = Math.random() * width;
                        this.y = Math.random() * height;
                        this.velocity = {
                            x: (Math.random() - 0.5) * 0.5,
                            y: (Math.random() - 0.5) * 0.5
                        };
                        this.radius = Math.random() * 1.5 + 0.5;
                        this.color = `rgba(0, 228, 255, ${Math.random() * 0.5 + 0.2})`;
                    }

                    update() {
                        this.x += this.velocity.x;
                        this.y += this.velocity.y;

                        if (this.x < 0 || this.x > width) this.velocity.x *= -1;
                        if (this.y < 0 || this.y > height) this.velocity.y *= -1;
                    }

                    draw() {
                        ctx.beginPath();
                        ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
                        ctx.fillStyle = this.color;
                        ctx.fill();
                    }
                }

                const particles = [];
                const particleCount = 100;

                for (let i = 0; i < particleCount; i++) {
                    particles.push(new Particle());
                }

                function animate() {
                    requestAnimationFrame(animate);
                    ctx.clearRect(0, 0, width, height);

                    for (let i = 0; i < particles.length; i++) {
                        for (let j = i + 1; j < particles.length; j++) {
                            const dx = particles[i].x - particles[j].x;
                            const dy = particles[i].y - particles[j].y;
                            const distance = Math.sqrt(dx * dx + dy * dy);

                            if (distance < 150) {
                                ctx.beginPath();
                                ctx.strokeStyle = `rgba(0, 228, 255, ${0.15 * (1 - distance/150)})`;
                                ctx.lineWidth = 0.6;
                                ctx.moveTo(particles[i].x, particles[i].y);
                                ctx.lineTo(particles[j].x, particles[j].y);
                                ctx.stroke();
                            }
                        }
                    }

                    particles.forEach(particle => {
                        particle.update();
                        particle.draw();
                    });
                }

                window.addEventListener('resize', function() {
                    width = window.innerWidth;
                    height = window.innerHeight;
                    canvas.width = width;
                    canvas.height = height;
                });

                animate();

                // Highlight active page in navigation
                const currentPath = window.location.pathname;
                const navLinks = document.querySelectorAll('.nav-item');

                navLinks.forEach(link => {
                    if (link.getAttribute('href') === currentPath) {
                        link.classList.add('active');
                    } else {
                        link.classList.remove('active');
                    }
                });

                <% if (req.query.id) { %>
                // Server Console JavaScript
                const serverId = '<%= req.query.id %>';
                let consoleWebSocket = null;
                
                // Connect to WebSocket on page load
                connectWebSocket();
                
                function connectWebSocket() {
                    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
                    const wsUrl = `${protocol}//${window.location.host}/api/server/${serverId}/console`;
                    
                    consoleWebSocket = new WebSocket(wsUrl);
                    
                    consoleWebSocket.onopen = function() {
                        addConsoleLine(`[${new Date().toLocaleTimeString()}] Connected to server console`, 'success');
                        addConsoleLine(`Type commands and press Enter to send them to your server.`, 'info');
                    };
                    
                    consoleWebSocket.onmessage = function(event) {
                        const data = JSON.parse(event.data);
                        
                        if (data.type === 'console_output') {
                            addConsoleLine(data.message, 'info');
                        } else if (data.type === 'error') {
                            addConsoleLine(`Error: ${data.message}`, 'error');
                        } else if (data.type === 'server_status') {
                            updateServerStatus(data.status);
                            addConsoleLine(`Server status: ${data.status}`, 'warning');
                        }
                    };
                    
                    consoleWebSocket.onclose = function() {
                        addConsoleLine(`[${new Date().toLocaleTimeString()}] Console disconnected. Reconnecting...`, 'warning');
                        // Try to reconnect after 3 seconds
                        setTimeout(connectWebSocket, 3000);
                    };
                    
                    consoleWebSocket.onerror = function(error) {
                        console.error('WebSocket error:', error);
                        addConsoleLine(`Console connection error. Retrying...`, 'error');
                    };
                }
                
                // Load server details and status
                fetch(`/api/server/${serverId}/status`)
                    .then(response => response.json())
                    .then(data => {
                        updateServerStatus(data.status);
                        updateServerDetails(data);
                    })
                    .catch(error => {
                        console.error('Error loading server status:', error);
                        updateServerStatus('unknown');
                    });
                
                function updateServerStatus(status) {
                    const indicator = document.getElementById('server-status-indicator');
                    const text = document.getElementById('server-status-text');
                    const statusBig = document.getElementById('server-status-big');
                    
                    let statusText = 'Unknown';
                    let statusClass = 'status-offline';
                    
                    if (status === 'running' || status === 'starting') {
                        statusText = 'Online';
                        statusClass = 'status-online';
                    } else if (status === 'stopped' || status === 'stopping') {
                        statusText = 'Offline';
                        statusClass = 'status-offline';
                    }
                    
                    if (indicator && text) {
                        indicator.className = 'status-indicator ' + statusClass;
                        text.textContent = statusText;
                    }
                    
                    if (statusBig) {
                        statusBig.textContent = statusText;
                    }
                }
                
                function updateServerDetails(data) {
                    // Update IP Address
                    const ipElement = document.getElementById('server-ip');
                    if (ipElement) {
                        ipElement.textContent = data.ip && data.ip !== 'N/A' && data.ip !== 'Loading...' ? data.ip : 'N/A';
                    }
                    
                    // Update Port
                    const portElement = document.getElementById('server-port');
                    if (portElement) {
                        portElement.textContent = data.port && data.port !== 'N/A' && data.port !== 'Loading...' ? data.port : 'N/A';
                    }
                    
                    // Update Disk Usage
                    const diskElement = document.getElementById('server-disk');
                    if (diskElement) {
                        if (data.diskTotal) {
                            const totalGB = data.diskTotal.toFixed(1);
                            diskElement.textContent = `${totalGB} GB total`;
                        } else {
                            diskElement.textContent = '0 GB';
                        }
                    }
                    
                    // Update RAM Usage
                    const ramElement = document.getElementById('server-ram');
                    if (ramElement && data.ramTotal) {
                        const ramTotalGB = data.ramTotal.toFixed(1);
                        ramElement.textContent = `${ramTotalGB} GB`;
                    }
                    
                    // Update CPU Usage
                    const cpuElement = document.getElementById('server-cpu');
                    if (cpuElement && data.cpuTotal) {
                        const cpuTotal = data.cpuTotal.toFixed(1);
                        cpuElement.textContent = `${cpuTotal} Cores`;
                    }
                }
                
                function powerAction(action) {
                    if (!confirm(`Are you sure you want to ${action} the server?`)) {
                        return;
                    }
                    
                    fetch(`/api/server/${serverId}/power`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ action: action })
                    })
                    .then(response => response.json())
                    .then(data => {
                        addConsoleLine(`[${new Date().toLocaleTimeString()}] ${action.charAt(0).toUpperCase() + action.slice(1)} action initiated.`, 'warning');
                        // Refresh status
                        setTimeout(() => {
                            fetch(`/api/server/${serverId}/status`)
                                .then(response => response.json())
                                .then(data => updateServerStatus(data.status));
                        }, 1000);
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        addConsoleLine(`Failed to ${action} server: ${error.message}`, 'error');
                    });
                }
                
                function sendCommand() {
                    const input = document.getElementById('console-input');
                    const command = input.value.trim();
                    if (!command) return;
                    
                    if (consoleWebSocket && consoleWebSocket.readyState === WebSocket.OPEN) {
                        // Send via WebSocket
                        consoleWebSocket.send(JSON.stringify({
                            type: 'command',
                            command: command
                        }));
                        addConsoleLine(`[${new Date().toLocaleTimeString()}] > ${command}`, 'command');
                        input.value = '';
                    } else {
                        // Fallback to REST API
                        fetch(`/api/server/${serverId}/command`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ command: command })
                        })
                        .then(response => response.json())
                        .then(data => {
                            addConsoleLine(`[${new Date().toLocaleTimeString()}] > ${command}`, 'command');
                            input.value = '';
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            addConsoleLine(`Failed to send command: ${error.message}`, 'error');
                        });
                    }
                }
                
                function addConsoleLine(text, type = 'info') {
                    const output = document.getElementById('console-output');
                    if (!output) return;
                    
                    const line = document.createElement('div');
                    line.className = 'console-line';
                    line.style.cssText = 'margin-bottom: 5px; color: ' + (type === 'error' ? '#ff4d4f' : type === 'success' ? '#00e400' : type === 'warning' ? '#ffbb33' : type === 'command' ? '#00e4ff' : '#ffffff') + ';';
                    line.textContent = text;
                    output.appendChild(line);
                    output.scrollTop = output.scrollHeight;
                }
                <% } %>
            });
        </script>
        <% } else { %>
        <div class="card">
            <div class="card-content">
                <h2 class="card-title"><i class="fas fa-exclamation-triangle"></i> Server Not Found</h2>
                <p>The requested server could not be found or you don't have permission to access it.</p>
                <button class="btn btn-primary" onclick="location.href='/servers'">
                    <i class="fas fa-arrow-left"></i> Back to Servers
                </button>
            </div>
        </div>
        <% } %>
        <% } %>
        <% } else { %>
        <!-- Servers List -->
        <% if (typeof pterodactyl !== 'undefined' && pterodactyl.relationships && pterodactyl.relationships.servers && pterodactyl.relationships.servers.data && pterodactyl.relationships.servers.data.length > 0) { %>
        <div class="card">
            <div class="card-content">
                <div class="card-header">
                    <h2 class="card-title"><i class="fas fa-server"></i> My Servers</h2>
                    <span style="color: var(--text-secondary);"><%= pterodactyl.relationships.servers.data.length %> server(s)</span>
                </div>
                
                <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 20px; margin-top: 20px;">
                    <% pterodactyl.relationships.servers.data.forEach(server => { %>
                    <div class="card" style="margin-bottom: 0; cursor: pointer; transition: all 0.3s;" onclick="location.href='?id=<%= server.attributes.id %>'">
                        <div class="card-content">
                            <div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 10px;">
                                <h3 style="margin: 0;"><%= server.attributes.name %></h3>
                                <span class="status-indicator <%= server.attributes.current_state === 'running' ? 'status-online' : 'status-offline' %>"></span>
                            </div>
                            <p style="color: var(--text-secondary); margin: 10px 0;">Status: <span style="color: var(--accent);"><%= server.attributes.current_state || 'unknown' %></span></p>
                            <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 10px; margin-top: 15px;">
                                <div>
                                    <div style="font-size: 0.8rem; color: var(--text-secondary);">Memory</div>
                                    <div style="font-weight: bold; color: var(--accent);"><%= (server.attributes.limits.memory / 1024).toFixed(1) %> GB</div>
                                </div>
                                <div>
                                    <div style="font-size: 0.8rem; color: var(--text-secondary);">CPU</div>
                                    <div style="font-weight: bold; color: var(--accent);"><%= server.attributes.limits.cpu / 100 %> Cores</div>
                                </div>
                                <div>
                                    <div style="font-size: 0.8rem; color: var(--text-secondary);">Disk</div>
                                    <div style="font-weight: bold; color: var(--accent);"><%= (server.attributes.limits.disk / 1024).toFixed(1) %> GB</div>
                                </div>
                            </div>
                            <div style="margin-top: 15px; padding-top: 15px; border-top: 1px solid var(--border);">
                                <button class="btn btn-primary" style="width: 100%;" onclick="event.stopPropagation(); location.href='?id=<%= server.attributes.id %>'">
                                    <i class="fas fa-terminal"></i> Open Console
                                </button>
                            </div>
                        </div>
                    </div>
                    <% }); %>
                </div>
            </div>
        </div>
        <% } else { %>
        <div class="card">
            <div class="card-content">
                <h2 class="card-title"><i class="fas fa-server"></i> My Servers</h2>
                <p>You don't have any servers yet. Create your first server to get started!</p>
                <button class="btn btn-primary" onclick="location.href='/create'">
                    <i class="fas fa-plus"></i> Create Server
                </button>
            </div>
        </div>
        <% } %>
        <% } %>
    </div>

    <div class="card" style="margin-top:20px;">
        <div class="card-content">
            <h3 class="card-title"><i class="fas fa-external-link-alt"></i> Open Panel</h3>
            <p>Manage your servers directly in the Pterodactyl panel.</p>
            <button class="btn btn-primary" onclick="location.href='/panel'">
                <i class="fas fa-external-link-alt"></i> Go to Panel
            </button>
        </div>
    </div>
</body>
</html>